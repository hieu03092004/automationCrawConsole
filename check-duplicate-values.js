const fs = require('fs');

function checkDuplicateValues() {
    try {
        // ƒê·ªçc file hashDataLogs.json
        const data = fs.readFileSync('hashDataLogs.json', 'utf8');
        const jsonData = JSON.parse(data);
        
        // L·∫•y object hash t·ª´ d·ªØ li·ªáu
        const hashData = jsonData.hash;
        
        if (!hashData) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y object "hash" trong file hashDataLogs.json');
            return;
        }
        
        console.log('üîç ƒêang ki·ªÉm tra c√°c values tr√πng l·∫∑p...\n');
        
        // T·∫°o map ƒë·ªÉ theo d√µi values v√† keys t∆∞∆°ng ·ª©ng
        const valueToKeys = new Map();
        const duplicates = new Map();
        
        // Duy·ªát qua t·∫•t c·∫£ c√°c key-value pairs
        for (const [key, value] of Object.entries(hashData)) {
            if (valueToKeys.has(value)) {
                // N·∫øu value ƒë√£ t·ªìn t·∫°i, th√™m v√†o danh s√°ch tr√πng l·∫∑p
                if (!duplicates.has(value)) {
                    duplicates.set(value, [valueToKeys.get(value), key]);
                } else {
                    duplicates.get(value).push(key);
                }
            } else {
                // N·∫øu value ch∆∞a t·ªìn t·∫°i, l∆∞u key ƒë·∫ßu ti√™n
                valueToKeys.set(value, key);
            }
        }
        
        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        if (duplicates.size === 0) {
            console.log('‚úÖ Tuy·ªát v·ªùi! Kh√¥ng c√≥ values tr√πng l·∫∑p n√†o ƒë∆∞·ª£c t√¨m th·∫•y.');
            console.log(`üìä T·ªïng s·ªë entries: ${Object.keys(hashData).length}`);
            console.log(`üìä S·ªë values duy nh·∫•t: ${valueToKeys.size}`);
        } else {
            console.log(`‚ùå T√¨m th·∫•y ${duplicates.size} values tr√πng l·∫∑p:\n`);
            
            let duplicateCount = 1;
            for (const [value, keys] of duplicates) {
                console.log(`üî¥ Tr√πng l·∫∑p #${duplicateCount}:`);
                console.log(`   Value: "${value}"`);
                console.log(`   Keys: ${keys.join(', ')}`);
                console.log(`   S·ªë l·∫ßn xu·∫•t hi·ªán: ${keys.length}\n`);
                duplicateCount++;
            }
            
            console.log(`üìä Th·ªëng k√™:`);
            console.log(`   - T·ªïng s·ªë entries: ${Object.keys(hashData).length}`);
            console.log(`   - S·ªë values duy nh·∫•t: ${valueToKeys.size}`);
            console.log(`   - S·ªë values tr√πng l·∫∑p: ${duplicates.size}`);
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói khi ƒë·ªçc file:', error.message);
    }
}

// Ch·∫°y function ki·ªÉm tra
checkDuplicateValues(); 
const fs = require('fs');
const path = require('path');

// ƒê·ªçc hashDataLogs.json ƒë·ªÉ l·∫•y mapping key->value
let hashDataLogs;
try {
    hashDataLogs = JSON.parse(fs.readFileSync('hashDataLogs.json', 'utf8'));
    console.log('‚úÖ ƒê√£ ƒë·ªçc th√†nh c√¥ng file hashDataLogs.json');
} catch (error) {
    console.error('‚ùå Error: Could not read hashDataLogs.json:', error.message);
    process.exit(1);
}

// ƒê·ªçc d·ªØ li·ªáu t·ª´ project.json
let projectData;
try {
    projectData = JSON.parse(fs.readFileSync('report/project.json', 'utf8'));
    console.log('‚úÖ ƒê√£ ƒë·ªçc th√†nh c√¥ng file report/project.json');
} catch (error) {
    console.error('‚ùå Error: Could not read report/project.json:', error.message);
    process.exit(1);
}

// Thu·∫≠t to√°n m·ªõi s·ª≠ d·ª•ng Set ƒë·ªÉ ki·ªÉm tra keys
function checkLogKeysWithSets() {
    console.log('\nüîç B·∫Øt ƒë·∫ßu ki·ªÉm tra keys b·∫±ng Set...\n');

    // 1. Thu th·∫≠p t·∫•t c·∫£ log keys t·ª´ project.json v√†o m·ªôt Set
    const logKeysSet = new Set();
    if (Array.isArray(projectData.chunkResults)) {
        // Duy·ªát qua t·ª´ng chunk
        projectData.chunkResults.forEach(chunk => {
            for (const [url, browsers] of Object.entries(chunk.itemsObject)) {
                for (const [browser, data] of Object.entries(browsers)) {
                    if (data.logs) {
                        const logs = data.logs;
                        [...logs.info, ...logs.warn, ...logs.error].forEach(key => logKeysSet.add(key));
                    }
                }
            }
        });
    } else if (projectData['items-object']) {
        // Tr∆∞·ªùng h·ª£p c≈©
        for (const [url, browsers] of Object.entries(projectData['items-object'])) {
            for (const [browser, data] of Object.entries(browsers)) {
                if (data.logs) {
                    const logs = data.logs;
                    [...logs.info, ...logs.warn, ...logs.error].forEach(key => logKeysSet.add(key));
                }
            }
        }
    }

    // 2. Thu th·∫≠p t·∫•t c·∫£ keys t·ª´ hashDataLogs.json v√†o m·ªôt Set
    const hashKeysSet = new Set(Object.keys(hashDataLogs.hash));

    // 3. So s√°nh k√≠ch th∆∞·ªõc
    const logKeysArr = Array.from(logKeysSet);
    const hashKeysArr = Array.from(hashKeysSet);
    const sameSize = logKeysSet.size === hashKeysSet.size;

    // 4. T√¨m c√°c keys b·ªã thi·∫øu ·ªü m·ªói b√™n
    const missingInHash = logKeysArr.filter(key => !hashKeysSet.has(key));
    const extraInHash = hashKeysArr.filter(key => !logKeysSet.has(key));

    // 5. In k·∫øt qu·∫£
    console.log(`üìä T·ªïng s·ªë keys trong project.json (logKeysSet): ${logKeysSet.size}`);
    console.log(`üìä T·ªïng s·ªë keys trong hashDataLogs.json (hashKeysSet): ${hashKeysSet.size}`);
    if (sameSize && missingInHash.length === 0 && extraInHash.length === 0) {
        console.log('\n‚úÖ T·∫§T C·∫¢ C√ÅC KEYS TRONG project.json ƒê·ªÄU T·ªíN T·∫†I TRONG hashDataLogs.json V√Ä NG∆Ø·ª¢C L·∫†I!');
    } else {
        if (missingInHash.length > 0) {
            console.log(`\n‚ùå C√≥ ${missingInHash.length} keys xu·∫•t hi·ªán trong project.json nh∆∞ng KH√îNG c√≥ trong hashDataLogs.json:`);
            missingInHash.slice(0, 10).forEach((key, idx) => {
                console.log(`   ${idx + 1}. ${key}`);
            });
            if (missingInHash.length > 10) {
                console.log(`   ... v√† ${missingInHash.length - 10} keys kh√°c`);
            }
        }
        if (extraInHash.length > 0) {
            console.log(`\n‚ùå C√≥ ${extraInHash.length} keys xu·∫•t hi·ªán trong hashDataLogs.json nh∆∞ng KH√îNG c√≥ trong project.json:`);
            extraInHash.slice(0, 10).forEach((key, idx) => {
                console.log(`   ${idx + 1}. ${key}`);
            });
            if (extraInHash.length > 10) {
                console.log(`   ... v√† ${extraInHash.length - 10} keys kh√°c`);
            }
        }
    }

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ ƒë·ªÉ d√πng cho b√°o c√°o t·ª± ƒë·ªông
    return {
        totalLogKeys: logKeysSet.size,
        totalHashKeys: hashKeysSet.size,
        missingInHash,
        extraInHash,
        allMatch: sameSize && missingInHash.length === 0 && extraInHash.length === 0
    };
}

// H√†m t·∫°o b√°o c√°o chi ti·∫øt
function generateDetailedReport() {
    console.log('\nüìÑ B√ÅO C√ÅO CHI TI·∫æT');
    console.log('='.repeat(60));

    const results = checkLogKeysWithSets();

    // T·∫°o file b√°o c√°o
    const reportData = {
        timestamp: new Date().toISOString(),
        summary: {
            totalLogKeys: results.totalLogKeys,
            totalHashKeys: results.totalHashKeys,
            missingInHash: results.missingInHash.length,
            extraInHash: results.extraInHash.length,
            allMatch: results.allMatch
        },
        missingInHash: results.missingInHash,
        extraInHash: results.extraInHash,
        status: results.allMatch ? 'SUCCESS' : 'WARNING'
    };

    // L∆∞u b√°o c√°o
    try {
        fs.writeFileSync('log-keys-check-report.json', JSON.stringify(reportData, null, 2));
        console.log('\nüíæ ƒê√£ l∆∞u b√°o c√°o chi ti·∫øt v√†o file: log-keys-check-report.json');
    } catch (error) {
        console.error('‚ùå Kh√¥ng th·ªÉ l∆∞u b√°o c√°o:', error.message);
    }

    return results;
}

// Ch·∫°y ki·ªÉm tra
if (require.main === module) {
    try {
        const results = generateDetailedReport();

        console.log('\n' + '='.repeat(60));
        console.log('üèÅ K·∫æT LU·∫¨N');
        console.log('='.repeat(60));

        if (results.allMatch) {
            console.log('‚úÖ T·∫§T C·∫¢ KEYS ƒê·ªÄU H·ª¢P L·ªÜ! C√≥ th·ªÉ y√™n t√¢m t·∫°o b√°o c√°o HTML.');
        } else {
            if (results.missingInHash.length > 0) {
                console.log(`‚ùå PH√ÅT HI·ªÜN ${results.missingInHash.length} KEYS B·ªä THI·∫æU TRONG hashDataLogs.json!`);
            }
            if (results.extraInHash.length > 0) {
                console.log(`‚ùå PH√ÅT HI·ªÜN ${results.extraInHash.length} KEYS TH·ª™A TRONG hashDataLogs.json!`);
            }
            console.log('   C·∫ßn ki·ªÉm tra l·∫°i qu√° tr√¨nh crawl v√† l∆∞u tr·ªØ logs.');
        }

        console.log(`\nüìà T·ª∑ l·ªá kh·ªõp: ${(results.allMatch ? 100 : ((results.totalLogKeys - results.missingInHash.length) / results.totalLogKeys * 100).toFixed(2))}%`);

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh ki·ªÉm tra:', error.message);
        process.exit(1);
    }
}

module.exports = { checkLogKeysWithSets, generateDetailedReport }; 